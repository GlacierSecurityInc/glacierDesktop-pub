name: Build artifact from PR
on:
  repository_dispatch:
    types: [build-command]

# Possible inputs:
# - /build in GlacierDesktop PR:
#   - ConverseBranch=master, GlacierDesktop=$PR_BRANCH
# - /build $CONVERSE_BRANCH in GlacierDesktop PR:
#   - ConverseBranch=converse-branch, GlacierDesktop=$PR_BRANCH
# - /build in Converse.js PR
#   - ConverseBranch=$PR_BRANCH, GlacierDesktop=main

jobs:
  build-pr:
    runs-on: macos-latest
    steps:
      - name: Parse PR body
        id: parsedPR
        uses: codetheweb/gh-action-issue-parser@v1
        with:
          body: ${{ github.event.client_payload.pull_request.body }}

      - name: Comment with build status
        uses: peter-evans/create-or-update-comment@v1.4.5
        id: createdComment
        with:
          issue-number: ${{ fromJSON(steps.parsedPR.outputs.parsed).actions.close[0].issue }}
          body: |
            ⚙️ building artifact...

            [Inspect workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Get branch of GlacierDesktop to build
        id: glacierBranch
        run: |
          if [ $PR_HEAD_REPO == "GlacierSecurityInc/glacierDesktop" ]; then
            echo "::set-output name=branch::$PR_HEAD_BRANCH"
          fi

          if [ $PR_HEAD_REPO == "GlacierSecurityInc/converse.js" -a ! "$BUILD_ARGS" == "" ]; then
            echo "::set-output name=branch::$BUILD_ARGS"
          fi

          if [ $PR_HEAD_REPO == "GlacierSecurityInc/converse.js" -a "$BUILD_ARGS" == "" ]; then
            echo "::set-output name=branch::main"
          fi
        env:
          PR_HEAD_REPO: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          PR_HEAD_BRANCH: ${{ github.event.client_payload.pull_request.head.ref }}
          BUILD_ARGS: ${{ github.event.client_payload.slash_command.args.unnamed.all }}

      - name: Get branch of Converse.js to build
        id: converseBranch
        run: |
          if [ $PR_HEAD_REPO == "GlacierSecurityInc/glacierDesktop" -a "$BUILD_ARGS" == "" ]; then
            echo "::set-output name=branch::master"
          fi

          if [ $PR_HEAD_REPO == "GlacierSecurityInc/glacierDesktop" -a ! "$BUILD_ARGS" == "" ]; then
            echo "::set-output name=branch::$BUILD_ARGS"
          fi

          if [ $PR_HEAD_REPO == "GlacierSecurityInc/converse.js" ]; then
            echo "::set-output name=branch::$PR_HEAD_BRANCH"
          fi
        env:
          PR_HEAD_REPO: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          PR_HEAD_BRANCH: ${{ github.event.client_payload.pull_request.head.ref }}
          BUILD_ARGS: ${{ github.event.client_payload.slash_command.args.unnamed.all }}

      - name: Checkout GlacierDesktop
        uses: actions/checkout@v1
        with:
          ref: ${{ steps.glacierBranch.outputs.branch }}

      - name: Get short SHA of GlacierDesktop
        id: glacierDesktopSHA
        run: |
          echo "::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)"

      - name: Checkout Converse.js
        id: converseCheckout
        run: |
          git config --file .gitmodules --get-regexp url | while read url; do
            git config --file=.gitmodules $(echo "$url" | sed -E "s/git@github.com:|https:\/\/github.com\//https:\/\/${{ secrets.PERSONAL_ACCESS_TOKEN }}:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com\//")
          done
          git submodule sync
          git submodule update --init --recursive --remote
          cd libs/vendor/converse.js && git checkout ${{ steps.converseBranch.outputs.branch }}
          echo "::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)"

      - name: Get app version
        id: package-version
        uses: Saionaro/extract-package-version@v1.0.6

      - name: Compute artifact name
        id: artifactName
        run: |
          echo "::set-output name=NAME::$(echo 'GlacierDesktop_Closes_${{ fromJSON(steps.parsedPR.outputs.parsed).actions.close[0].issue }}_${{ steps.glacierBranch.outputs.branch }}_${{ steps.converseBranch.outputs.branch }}_${{ steps.glacierDesktopSHA.outputs.SHA_SHORT }}_${{ steps.converseCheckout.outputs.SHA_SHORT }}_${{ steps.package-version.outputs.version}}' | tr -cd '.A-Za-z0-9_-')"

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Cache Converse.js dependencies
        uses: c-hive/gha-npm-cache@v1
        with:
          directory: libs/vendor/converse.js

      - name: Cache Electron
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.cache/electron
          key: ${{ runner.os }}-electron-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/package-lock.json')) }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Codesign on macOS
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $MACOS_KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $MACOS_KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $MACOS_KEYCHAIN_PASSWORD build.keychain

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build app
        run: yarn build

      - name: Package app
        run: yarn dist -p never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename artifact
        run: |
          mv dist/*.dmg dist/$NAME.dmg
        env:
          NAME: ${{ steps.artifactName.outputs.NAME }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifactName.outputs.NAME }}
          path: dist/*.dmg

      - name: Upload artifact to Google Drive
        uses: codetheweb/upload-to-drive@v1.3.0
        id: gdrive
        with:
          target: dist/*.dmg
          credentials: ${{ secrets.GDRIVE_CREDENTIALS }}
          folder: ${{ secrets.GDRIVE_FOLDER }}
          name: ${{ steps.artifactName.outputs.NAME }}

      - name: Comment with link to artifact
        uses: peter-evans/create-or-update-comment@v1.4.5
        with:
          issue-number: ${{ fromJSON(steps.parsedPR.outputs.parsed).actions.close[0].issue }}
          comment-id: ${{ steps.createdComment.outputs.comment-id }}
          edit-mode: replace
          body: |
            🚀 artifact ready for testing:

            [Download artifact](${{ steps.gdrive.outputs.fileLink }})

      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1.4.5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray

      - name: Update build status comment to failed
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v1.4.5
        with:
          issue-number: ${{ fromJSON(steps.parsedPR.outputs.parsed).actions.close[0].issue }}
          comment-id: ${{ steps.createdComment.outputs.comment-id }}
          edit-mode: replace
          body: |
            🚫 artifact failed to build

            [Inspect workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
